#include "Arduino.h"

#define MOVING_AVERAGE_INTERVALS 20
#define PID_INTERVAL 100
#define THERM_INTERVAL 10
#define THERM_PIN A1
#define RELAY_PIN 1
#define WINDOW_SIZE 1009 // this is prime which gets us nice stuff

float target = 37.0; // body temp

float kp;  // This has units of output/input
float ki;  // This has units of output/input/s
float kd;  //This has units of output/(input/s)

// This is the internal state of our PID
float lastTemp;
float accumulatedI = 0;

// Run a simple moving avg on temp to remove noise
int lastTempUpdate;
int lastPidUpdate;
int relayWindowStart;
float movingAvgTemp;

int output = 0; // between [0, window size]

void setup() { 
  Serial.begin(115200);
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(THERM_PIN, INPUT);

  lastPidUpdate = millis();
  lastTempUpdate = lastPidUpdate;
  relayWindowStart = lastPidUpdate;
  lastTemp = getTemp();
  movingAvgTemp = lastTemp;
} 

void loop(void) {
  int millis = millis();
  float temp = getTemp();
  if (millis - lastTempUpdate > THERM_INTERVAL) {
    lastTempUpdate = millis;
    movingAvgTemp = (movingAvgTemp * (MOVING_AVERAGE_INTERVALS - 1) + temp) / MOVING_AVERAGE_INTERVALS;
  }

  if (millis - lastPidUpdate > PID_INTERVAL) {
    lastPidUpdate = millis;
    output = updatePid(movingAvgTemp); 
  }

  if (millis - relayWindowStart >= WINDOW_SIZE) {
    relayWindowStart = millis;
  }

  if (millis - relayWindowStart < output) {
    digitalWire(RELAY_PIN, HIGH);
  } else {
    digitalWire(RELAY_PIN, LOW);
  }

}

int updatePid(float temp) {
  float error = target - temp;
  float delta = lastTemp - temp;
  lastTemp = temp;

  if (error < 0) {
    accumulatedI = 0;
    return 0;
  }

  float p = kp * error;
  float accumulatedI += ki * error; // the time of 100ms is implicit in the tuning param ki
  float d = kd * delta;
  accumulatedI = min(accumulatedI, WINDOW_SIZE - p);
  accumulatedI = max(accumulatedI, 0);
  return min(WINDOW_SIZE, p + accumulatedI + d);
}

float getTemp() {
  int val = analogRead(THERM_PIN);
  // convert to temp
  return temp;
}
